"""first revision

Revision ID: b0261c1e5105
Revises: 
Create Date: 2024-07-14 18:13:41.310819

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "b0261c1e5105"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "companies",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("address", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("country_code", sa.String(), nullable=False),
        sa.Column("phone_number", sa.VARCHAR(), nullable=False),
        sa.Column("registration_number", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("name", "email", name="company_name_email_uix"),
        sa.UniqueConstraint("phone_number", name="company_phone_number_uix"),
        sa.UniqueConstraint("registration_number"),
    )
    op.create_index(
        "company_name_email_idx", "companies", ["name", "email"], unique=False
    )
    op.create_index(op.f("ix_companies_id"), "companies", ["id"], unique=False)
    op.create_index(
        op.f("ix_companies_phone_number"), "companies", ["phone_number"], unique=False
    )
    op.create_table(
        "events",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("event_date", sa.Date(), nullable=False),
        sa.Column("event_time", sa.Time(timezone=True), nullable=False),
        sa.Column("venue", sa.String(), nullable=False),
        sa.Column("location_lat", sa.Float(), nullable=False),
        sa.Column("location_long", sa.Float(), nullable=False),
        sa.Column("available_tickets", sa.Integer(), nullable=False),
        sa.Column("base_price", sa.Float(), nullable=False),
        sa.Column("surge_price", sa.Float(), nullable=False),
        sa.Column("surge_threshold", sa.Float(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "name", "location_lat", "location_long", name="name_lat_long_uix"
        ),
    )
    op.create_index(
        op.f("ix_events_event_date"), "events", ["event_date"], unique=False
    )
    op.create_index(
        op.f("ix_events_event_time"), "events", ["event_time"], unique=False
    )
    op.create_index(op.f("ix_events_id"), "events", ["id"], unique=False)
    op.create_index(op.f("ix_events_name"), "events", ["name"], unique=False)
    op.create_index("location_lat", "events", ["location_long"], unique=False)
    op.create_table(
        "users",
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("country_code", sa.String(), nullable=False),
        sa.Column("phone_number", sa.VARCHAR(), nullable=False),
        sa.Column(
            "role",
            postgresql.ENUM("ADMIN", "SUPER_ADMIN", "USER", name="roles"),
            nullable=False,
        ),
        sa.Column("company_id", sa.Integer(), nullable=True),
        sa.Column("keycloak_id", sa.VARCHAR(), nullable=False),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("name", "email", name="name_email_uix"),
        sa.UniqueConstraint("phone_number", name="phone_number_uix"),
    )
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(
        op.f("ix_users_keycloak_id"), "users", ["keycloak_id"], unique=False
    )
    op.create_index(
        op.f("ix_users_phone_number"), "users", ["phone_number"], unique=False
    )
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=False)
    op.create_index("name", "users", ["email"], unique=False)
    op.create_table(
        "bookings",
        sa.Column("event_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column(
            "booking_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("quantity", sa.Integer(), nullable=False),
        sa.Column("total_cost", sa.Float(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["event_id"],
            ["events.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_bookings_event_id"), "bookings", ["event_id"], unique=False
    )
    op.create_index(op.f("ix_bookings_id"), "bookings", ["id"], unique=False)
    op.create_index(op.f("ix_bookings_user_id"), "bookings", ["user_id"], unique=False)
    op.create_table(
        "payments",
        sa.Column("booking_id", sa.Integer(), nullable=False),
        sa.Column("amount", sa.Float(), nullable=False),
        sa.Column(
            "status",
            postgresql.ENUM("PENDING", "COMPLETED", "FAILED", name="paymentstatus"),
            nullable=False,
        ),
        sa.Column("transaction_id", sa.String(), nullable=False),
        sa.Column(
            "payment_time",
            sa.DateTime(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("idempotency_key", sa.String(), nullable=False),
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["booking_id"],
            ["bookings.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("idempotency_key"),
        sa.UniqueConstraint("transaction_id"),
    )
    op.create_index(op.f("ix_payments_id"), "payments", ["id"], unique=False)
    op.create_index("transaction_id_idx", "payments", ["transaction_id"], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index("transaction_id_idx", table_name="payments")
    op.drop_index(op.f("ix_payments_id"), table_name="payments")
    op.drop_table("payments")
    op.drop_index(op.f("ix_bookings_user_id"), table_name="bookings")
    op.drop_index(op.f("ix_bookings_id"), table_name="bookings")
    op.drop_index(op.f("ix_bookings_event_id"), table_name="bookings")
    op.drop_table("bookings")
    op.drop_index("name", table_name="users")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_phone_number"), table_name="users")
    op.drop_index(op.f("ix_users_keycloak_id"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_table("users")
    op.drop_index("location_lat", table_name="events")
    op.drop_index(op.f("ix_events_name"), table_name="events")
    op.drop_index(op.f("ix_events_id"), table_name="events")
    op.drop_index(op.f("ix_events_event_time"), table_name="events")
    op.drop_index(op.f("ix_events_event_date"), table_name="events")
    op.drop_table("events")
    op.drop_index(op.f("ix_companies_phone_number"), table_name="companies")
    op.drop_index(op.f("ix_companies_id"), table_name="companies")
    op.drop_index("company_name_email_idx", table_name="companies")
    op.drop_table("companies")
    payment_status = sa.Enum("PENDING", "COMPLETED", "FAILED", name="paymentstatus")
    payment_status.drop(op.get_bind())
    roles = sa.Enum("ADMIN", "SUPER_ADMIN", "USER", name="roles")
    roles.drop(op.get_bind())
    # ### end Alembic commands ###
